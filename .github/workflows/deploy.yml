name: Build and Deploy (Docker -> ECR -> EC2)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}
  PUBLIC_ECR_REGION: us-east-1
  ECR_PUBLIC_REPO: public.ecr.aws/r5p8n8t0/chat.therama.dev
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_HOST: ${{ secrets.EC2_HOST }}


jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Capture start time
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate SSH key is present
        run: |
          if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
            echo "EC2_SSH_KEY secret is empty or missing." >&2
            exit 1
          fi
      - name: Write SSH key to file
        run: |
          mkdir -p ./.ssh
          umask 077
          echo "${{ secrets.EC2_SSH_KEY }}" > ./.ssh/ec2_key
          chmod 600 ./.ssh/ec2_key
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_GLOBAL }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_GLOBAL }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region ${PUBLIC_ECR_REGION} | \
            docker login --username AWS --password-stdin public.ecr.aws
      - name: Build, tag, and push image to ECR Public
        run: |
          IMAGE_URI=${ECR_PUBLIC_REPO}:${IMAGE_TAG}
          echo "Building image: $IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
          
      - name: Build and Push to ECR Public
        run: |
          docker build -t $ECR_PUBLIC_REPO:$IMAGE_TAG .
          docker push $ECR_PUBLIC_REPO:$IMAGE_TAG
        
      - name: Upload docker-compose.yml to EC2
        run: |
          scp -i ./.ssh/ec2_key -o StrictHostKeyChecking=no \
            deploy/docker-compose.yml \
            ${EC2_USER}@${EC2_HOST}:~/chat-therama-deploy/
        
      - name: SSH to EC2 and Deploy
        run: |
          ssh -i ./.ssh/ec2_key -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} \
          "PUBLIC_ECR_REGION='${PUBLIC_ECR_REGION}' ECR_PUBLIC_REPO='${ECR_PUBLIC_REPO}' IMAGE_TAG='${IMAGE_TAG}' bash -s" <<'EOF'
          set -euo pipefail
          cd ~/chat-therama-deploy
        
          # Ensure docker compose plugin
          if ! sudo docker compose version >/dev/null 2>&1; then
            echo "Installing Docker Compose plugin..."
            sudo mkdir -p /usr/libexec/docker/cli-plugins
            sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" \
              -o /usr/libexec/docker/cli-plugins/docker-compose
            sudo chmod +x /usr/libexec/docker/cli-plugins/docker-compose
          fi
        
          # Deploy
          IMAGE_URI=${ECR_PUBLIC_REPO}:${IMAGE_TAG}
          sudo docker pull $IMAGE_URI
          echo "IMAGE=$IMAGE_URI" > .env
          sudo docker compose -f docker-compose.yml down || true
          sudo docker compose -f docker-compose.yml up -d
          EOF
        
        
      - name: Log and Update Deployment
        if: always()
        uses: ramaeondev/therama.dev/.github/actions/log-and-update-deployment@master
        with:
          start_time: ${{ env.START_TIME }}
          s3_bucket: ${{ secrets.S3_UPLOAD_BUCKET }}