
name: Deploy to AWS S3

on:
  push:
    branches: [ master ]
  workflow_dispatch:


jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Capture start time
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Cache node modules
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
            
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
        
      - name: Build
        run: npm run build:prod
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_GLOBAL }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_GLOBAL }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to S3
        run: |
          aws s3 sync ./dist/chat-therama-dev s3://${{ secrets.S3_BUCKET }} \
            --delete \
            --cache-control 'public, max-age=31536000' \
            --exclude 'index.html' \
            --exclude '*.css' \
            --exclude '*.js' \
            
          # Upload HTML files with no-cache headers
          aws s3 sync ./dist/chat-therama-dev s3://${{ secrets.S3_BUCKET }} \
            --delete \
            --cache-control 'no-cache, no-store, must-revalidate' \
            --content-type 'text/html' \
            --exclude '*' \
            --include '*.html' \
            
          # Upload CSS and JS with cache headers
          aws s3 sync ./dist/chat-therama-dev s3://${{ secrets.S3_BUCKET }} \
            --delete \
            --cache-control 'public, max-age=31536000' \
            --content-encoding 'gzip' \
            --exclude '*' \
            --include '*.css' \
            --include '*.js'
        
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
            
      - name: Log and Update Deployment
        if: always()
        uses: ramaeondev/therama.dev/.github/actions/log-and-update-deployment@master
        with:
          start_time: ${{ env.START_TIME }}
          s3_bucket: ${{ secrets.S3_UPLOAD_BUCKET }}